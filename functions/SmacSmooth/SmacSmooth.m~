function [ s ] = SmacSmooth( gro_ato, box_dim, sys_data, smac_data )
% Spacially smoothed Smac CV

    % CV specifications
    center_indices = smac_data.center_indices;
    vector_indices = smac_data.vector_indices;
    r_cut = smac_data.r_cut;
    r_cell = smac_data.r_cell;
    n_cut = smac_data.n_cut;
    phi_0 = smac_data.phi_0;
    sigma_0 = smac_data.sigma_0;
    a = smac_data.a;
    b = smac_data.b;


%fermi = @(x, m) (exp(x-m)+1).^(-1);
rationalSWF = @(x, x0, a, b) (1-(x/x0).^a) ./ (1-(x/x0).^b);
bell = @(x, mu, sigma) exp(-(x-mu).^2/(2*sigma^2));
vectorAngle = @(v1, v2) acos(dot(v1, v2) ...
    ./(sqrt(dot(v1,v1)).*sqrt(dot(v2,v2))));

a = 12;
b = 24;

[T, av, bv, cv] = fractionalCoordinates(box_dim);
centers = centers_8_9(atoms, box_dim, T, av, bv, cv);
N = length(centers);
apm = length(atoms)/N;
[cellList, cellNums] = createCellList_tric(centers, box_dim, 1.2*r_cut);

s = zeros(N,1);

verletList = zeros(N, 10);
for i=1:N
    neighborList = cellNeighbors(i, centers, cellList, cellNums);

    % get vectors for angles
    if vec1257
        v0 = vectors_1_2_5_7(atoms, i, apm, box_dim, T, av, bv, cv);
        v_i = vectors_1_2_5_7(atoms, neighborList, apm, box_dim, T, av, bv, cv);
    else
        v0 = vectors_8_9(atoms, i, apm, box_dim, T, av, bv, cv);
        v_i = vectors_8_9(atoms, neighborList, apm, box_dim, T, av, bv, cv);
    end

    phi_i = zeros(length(neighborList),1);
    % phi_i = zeros(length(centers),1);
    for k=1:length(phi0)
        phi_ij = vectorAngle(repmat(v0, length(neighborList), 1)', v_i');
    %     phi_ij = vectorAngle(repmat(v_i, 1, length(centers)), v_ij);
        % Mirror angle>90? at 90?:
        phi_ij = min(phi_ij, pi-phi_ij);
        phi_i = phi_i + min(1, bell(phi_ij, phi0(k,1), phi0(k,2))');
    end
    %phi_i=phi_i/length(phi0);

    f_i = zeros(length(neighborList),1);
    % f_i = zeros(length(centers),1);
    for j=1:length(f_i)
        r_ij = normPBC(centers(i,:), centers(neighborList(j),:), box_dim, T, av, bv, cv);
    %     r_ij = normPBC(centers(mol_nr,:), centers(j,:), box_dim);
        f_i(j) = rationalSWF(r_ij, r_cut, a, b);
        if f_i(j)>0.5
            verletList(i,1) = verletList(i,1) + 1;
            verletList(i, verletList(i,1)+1) = neighborList(j);
        end
    end

    n_i = sum(f_i);
    rho_i = rationalSWF(n_i, n_cut, -a, -b);
    
    s(i) = rho_i/n_i * sum(f_i.*phi_i);
end

s = NNsmoth(s, verletList);

end

